#summary 数据存储和读取策略

<wiki:toc/>

= 原则 =
 
 * 能动态增加新的节点
 * 保证查询速度
 * 配置相当简单
 * 支持2000万用户数据

= 配置 =

{{{
return array(
  "rock" => array(//公共操作
     "master" => "xxx",
     "slaves" => array(
        "mongodb://xxxxx?pesist=xxx&weight=xxxx",
        "mongodb://xxxxx?pesist=xxx&weight=xxxx",
      )
  ),

  "logs" => array(
     "master" => "xxx",
     "slaves" => array(
        "mongodb://xxxxx?pesist=xxx&weight=xxxx",
        "mongodb://xxxxx?pesist=xxx&weight=xxxx",
      ),
      "sharding" => 5//分片数
  ),
  "users" => array(
     "master" => "xxx",
     "slaves" => array(
        "mongodb://xxxxx?pesist=xxx&weight=xxxx",
        "mongodb://xxxxx?pesist=xxx&weight=xxxx",
      ),
      "sharding" => 10
  )
);
}}}

= 分片 =

 * 根据用户ID（一个数字）将每一个collection分成N个，分别命名为：log_0, log1, .. logN

= 写入和更新 =

{{{
$db = Rdb::dbWithUid(1);
$db->select("logs")->insert($logArray);
}}}

这里的logs和上面配置中的logs对应

= 读取 =

{{{
$db = Rdb::dbWithUid(1);
$db->select("log")->id("xxxxxxxxxxx")->findOne();
}}}

这里的logs和上面配置中的logs对应

= 公用数据 =

公用数据没有分片，全都使用配置中的rock项。

{{{
$db = RDb::rock();
$db->select("rock_cache")->insert($cache);
}}}

= 用户ID =

用户ID需要根据自己的算法生成，并能很方便地在数字和16进制之间转换。

= 聚合 =

如果满足以下条件：
 * 数据量小（<100）
 * 不需要进行复杂的条件过滤
 * 不需要进行复杂的排序

事实上，在Web开发中后两种情况，往往可以由前端来解决。

就可以把它们放入到同一条记录中，使用用户ID作为主键，以后根据主键就可以查询出来，比如：

{{{
   array(
     "_id" => [用户ID十六进制格式],
     "logs" => array(
        "id1" => array("date" => ..., "description" => ...),
        "id2" => array("date" => ..., "description" => ...),
        ...
     )
  )
}}}

其中id1, id2 ..为我们自己生成的唯一的ID，用来删除、修改数据。

= 案例 =

== 日志和消息 ==

=== 数据结构 ===

{{{
{
  _id:ObjectId([id]),
  logs: {
     [logid1]:{ description: [description], created_at:[time] } ,
     ...
  }
}
}}}

=== 创建 ===

{{{
$userlog = RDb::rowWithUid($uid);
$userlog->append(array(
  "description" => "Hello,World",
  "created_at" => time()
));
$userlog->save();
}}}

=== 修改 ===

{{{
$userlog = RDb::rowWithUid($uid);
$userlog->set($key, array(
  "description" => "New Hello,World",
  "created_at" => time()
));
$userlog->save();
}}}

=== 删除 ===

{{{
$userlog = RDb::rowWithUid($uid);
$userlog->delete($key);
$userlog->save();
}}}


=== 读取 ===

{{{
$userlog = RDb::rowWithUid($uid);
$logs = $userlog->findAll();
$log = $userlog->get($key);
}}}

== 用户信息 ==

=== 数据结构 ===

{{{
{
  _id:ObjectId([id]),
  profile: {
      name:[name],
      age:[age],
      ...
  }
}
}}}

== 物品信息 ==