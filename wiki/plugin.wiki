#sidebar rock_mongo_toc

<wiki:toc/>

== How plug-in works ==

RockMongo plug-in feature allow you to filter data and listen events.

You registered data filters and event listeners in your plug-in, then RockMongo call them in a proper time.

You may enable and disable plug-ins in app/configs/rplugin.php.

== Write a plug-in ==

There is only four steps to write a plug-in for RockMongo:
 # create a plug-in directory under app/plugins
 # put a init.php in the directory we created
 # call api to add data filters and event listeners in init.php
 # enable your plug-in in app/configs/rplugin.php

For instance, you want to create a plug-in named myplugin, so your directory structure will look like this:
{{{
   app/
      plugins/ 
         myplugin/
             init.php
}}}

init.php:
{{{
<?php

function my_filter($data) {
  //filter data
}

RFilter::add("SUPPORTED FILTER NAME", "my_filter");

?>
}}}

rplugin.php:
{{{
<?php

$plugins["myplugin"]["enabled"] = 1;
//$plugins["myplugin2"]["enabled"] = 1;
//$plugins["myplugin3"]["enabled"] = 1;

?>
}}}

== API ==
 * RFilter::add($dataType, $filter, $priority = -1) - add a filter
 * RFilter::remove($dataType, $filter) - remove a filter
 * RFilter::stop($dataType) - stop a filter chain
 * REvent::listen($event, $callback, $priority = -1) - add a event listener
 * REvent::remove($event, $callback)  - remove a event listener
 * REvent::stop($event) - stop event propagation

 

== Filters ==
=== CONFIG_FILTER ===
Filter RockMongo configuration.

 * Params:
     * $MONGO global variable
 * Demo:
{{{
function my_config_filter($MONGO) {
	$MONGO["servers"][0]["mongo_name"] = "TestServer";
        //other configurations goes below
}
RFilter::add("CONFIG_FILTER", "my_config_filter");
}}}

=== SERVER_FILTER ===
filter server before authentication, give you a chance to integrate authentication with your own system.
 * Params:
     * MServer $server the server which current user want to log-in
 * Demo:
{{{
function my_login_filter (MServer $server) {
    $user = $_COOKIE["user"];//suppose you store user name in cookie
    
    //connect to your MySQL or other system to decide which mongo host to log-in

    //set mongo parameters
    $server->setMongoHost("192.168.1.100");
    $server->setMongoPort(27017);
    $server->setMongoUser("...");
    $server->setMongoPass("...");
    $server->setMongoDb("..."); 

    //let the user log-in in without internal authentication filter
    $server->setControlAuth(false);
    $server->setMongoAuth(false);

    //now user log-in with your own authentication
}
RFilter::add("SERVER_FILTER", "my_login_filter");
}}}


== Events ==

=== RENDER_PAGE_HEADER_EVENT ===
Fired when render page header.

Demo:
{{{
function my_header_event() {
   echo "<link rel=\"stylesheet\" href=\"/css/my.css\" />\n";//add my own stylesheets
}

REvent::listen("RENDER_PAGE_HEADER_EVENT", "my_header_event");
}}}

=== RENDER_PAGE_FOOTER_EVENT ===
Fired when render page footer.