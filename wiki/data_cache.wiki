#summary 数据缓存

{{toc}}

= 多级缓存 =

== 主动缓存程序文件 ==

在WebServer启动之后，自动调用apc_compile_file()函数讲网站目录下的所有.php文件编译成OPCODE，并缓存在内存中。

== 基于版本的管理 ==

每个用户在数据库（可能是MongoDB）rock_version表中保存以下信息：
{{{
array (
  "user" => 23,
  "message" => 5,
  "log" => 317,
  ...
  信息类型 => 版本号
);
}}}

当用户的某个信息（比如log）变化时，就将版本号加1（此时log => 318），当然这是封装好的：
{{{
$db = RDb::dbWithUid(1);
...
$db->updateVersion("log");
}}}

== 计算KEY ==

缓存的KEY是跟版本相关的：
{{{
function keyWithVersion($key, $type) {
   $version = $db->version($type);
   $key = $version . $key;
   return $key;
}
}}}

== 多级缓存 ==

在缓存的时候设置以下三级缓存：
 * 上下文（$GLOBALS)缓存
 * APC缓存
 * 数据库缓存

试图从缓存中读取数据，也是按照上面的顺序的。

= 客户端 =

== 生成静态网页 ==

有些页面可以生成静态网页，比如用户帮助。

有些可以生成XML，比如语言选项。

如果在使用JSON作为数据格式传输数据，可以考虑生成静态的.json。

应该提供工具给管理员，使之能很方便地重新生成。

== refresh参数 ==

有些数据可以由客户端（比如Flash）来决定要不要刷新，使用的参数可以是refresh和time两个，前者决定是否刷新，后者用来记录上次刷新的时间，如果超过某个时间长度，我们也可以主动刷新。